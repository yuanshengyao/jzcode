#!/usr/bin/env node

const path = require('path');
const program = require('commander');
// const download = require('download-git-repo');
// const handlebars = require('handlebars');
// const inquirer = require('inquirer');
const ora = require('ora');
const chalk = require('chalk');
const symbols = require('log-symbols');
const iconv = require('iconv-lite');

const { copyAllFile, deleteAllFile } = require('./common/utils/files');
const nodeCmd = require('./common/utils/nodecmd');
const isWin32 = process.platform === 'win32';

const rootPath = path.resolve(__dirname, 'view');
const commonPath = path.resolve(__dirname, 'common/dist');
const commonTargetPath = path.resolve(__dirname, 'view/common');
const jzVuePath = path.resolve(__dirname, 'jzvue/dist');
const jzVueTargetPath = path.resolve(__dirname, 'view/jzvue');

// setTimeout(() => {
//   console.log(symbols.success ,chalk.green('项目构建成功'));
// }, 3000);
// console.log(symbols.error, chalk.red('项目构建失败'));

function TaskQueue() {
  let taskList = [];
  this.add = (task) => {
    taskList.push(task);
  },
  this.remove = (taskName) => {
    for(let i = 0; i < taskList.length; i ++) {
      if(taskName.name == taskList[i].name) {
        taskList.splice(i, 1);
      }
    }
  },
  this.fire = () => {
    if(taskList[0] === undefined) {
      console.log('任务队列: 没有需要执行的任务');
      return;
    }
    taskList[0]().then((data) => {
      spinner.stop();
      console.log(data);
      taskList.shift();
      if(!!taskList[0]) {
        spinner.start();
        this.fire();
      }else {
        console.log('任务队列: 任务执行完毕');
      }
    })
  },
  this.stop = () => {}
}

const spinner = ora('正在运行中...');
spinner.start();

if(isWin32) {
  const jzTask = new TaskQueue();
  // -----------------------------------------------------------------------------------
  // 完成各项目打包
  // -----------------------------------------------------------------------------------
  const jzvueBuild = () => {
    return nodeCmd.execPromise('cd ./jzvue & npm run build');
  }
  const testBuild = () => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('test项目打包成功');
      }, 3000);
    });
  }
  jzTask.add(testBuild);
  jzTask.add(jzvueBuild);
  jzTask.add(testBuild);

  // -----------------------------------------------------------------------------------
  // 项目构建完成，打包后的代码copy到目标文件夹
  // -----------------------------------------------------------------------------------
  const deleteAllFileTask = () => {
    return new Promise((resolve, reject) => {
      try {
        deleteAllFile(rootPath, {
          exclude: {
            files: ['.gitignore'],
            dirs: []
          }
        });
        resolve('remove view’s files');
      }catch(e) {
        console.log(e);
      }
    })
  }
  const copyAllFileTask = () => {
    return new Promise((resolve, reject) => {
      try {
        copyAllFile(commonPath, commonTargetPath);
        copyAllFile(jzVuePath, jzVueTargetPath);
        resolve('copy files to view');
      }catch(e) {
        console.log(e);
      }
    })
  }
  jzTask.add(deleteAllFileTask);
  jzTask.add(copyAllFileTask);

  // -----------------------------------------------------------------------------------
  // 服务启动,基本当成开发环境
  // -----------------------------------------------------------------------------------
  // const serverStart = () => {
  //   return nodeCmd.spawnPromise(isWin32 ? 'npm.cmd' : 'npm', ['start']);
  // }
  // jzTask.add(serverStart);

  // -----------------------------------------------------------------------------------
  // 任务执行
  // -----------------------------------------------------------------------------------
  jzTask.fire();
}else {
  const subProcess = nodeCmd.bashCommand();
  // -----------------------------------------------------------------------------------
  // 完成各项目打包
  // -----------------------------------------------------------------------------------
  subProcess.stdin.write('cd ./jzvue \n');
  subProcess.stdin.write('npm run build \n');

  // -----------------------------------------------------------------------------------
  // 项目构建完成，打包后的代码copy到目标文件夹
  // -----------------------------------------------------------------------------------
  subProcess.stdin.write('cd ../view \n');
  subProcess.stdin.write('pwd \n');
  // subProcess.stdin.write('rm -rf !(".gitignore") \n');
  deleteAllFile(rootPath, {
    exclude: {
      files: ['.gitignore'],
      dirs: []
    }
  });
  console.log('remove view’s files');
  subProcess.stdin.write(`cp -r ${commonPath} ${commonTargetPath} \n`);
  subProcess.stdin.write(`cp -r ${jzVuePath} ${jzVueTargetPath} \n`);

  // -----------------------------------------------------------------------------------
  // 服务启动,不在脚本上启动了
  // -----------------------------------------------------------------------------------
  // subProcess.stdin.write('cd ../ \n');
  // subProcess.stdin.write('pwd \n');
  // subProcess.stdin.write('nohup npm start & \n');
  subProcess.on('close', code => {
    console.log('子进程退出码: ', code);
    spinner.stop();   //这里有问题，stop不了
  })
  subProcess.stdin.end(); //这里好像没执行
}
